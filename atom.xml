<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://southwindi.xyz</id>
    <title>mio^</title>
    <updated>2021-06-30T09:34:34.820Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://southwindi.xyz"/>
    <link rel="self" href="https://southwindi.xyz/atom.xml"/>
    <subtitle>月夜棹孤舟</subtitle>
    <logo>https://southwindi.xyz/images/avatar.png</logo>
    <icon>https://southwindi.xyz/favicon.ico</icon>
    <rights>All rights reserved 2021, mio^</rights>
    <entry>
        <title type="html"><![CDATA[C++]]></title>
        <id>https://southwindi.xyz/post/c/</id>
        <link href="https://southwindi.xyz/post/c/">
        </link>
        <updated>2021-06-30T08:46:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="多态polymorphism">多态（polymorphism）</h2>
<ol>
<li>
<p>多态：通常指对于同一个消息、同一种调用，在不同的场合，针对不同的对象下，执行不同的行为。</p>
</li>
<li>
<p>使用多态的原因</p>
<ul>
<li>代码复用</li>
<li>解决紧耦合问题，提高程序的扩展性</li>
</ul>
</li>
<li>
<p>多态的类型</p>
<ul>
<li>静态多态（编译时多态）：函数重载、运算符重载、模板（编译时确定）</li>
<li>动态多态（运行时多态）：通过<strong>虚函数</strong>体现（运行时确定）</li>
</ul>
</li>
<li>
<p>虚函数定义</p>
<ul>
<li>在基类中被声明为<strong>virtual</strong>，并在一个或者多个派生类中被<strong>重新定义</strong>的成员函数</li>
<li>如果一个基类的成员函数定义为虚函数，那么它在所有的派生类中也为虚函数，即使省略了virtual关键字</li>
<li>虚函数在派生类中<strong>重新定义</strong>时，除函数体外，其格式应保持基类的虚函数相同</li>
</ul>
</li>
<li>
<p>虚函数的实现机制</p>
<ul>
<li>基类中定义一个虚函数后，创建基类对象时，会在其存储布局的开始位置产生一个虚函数指针，该虚函数指针指向基类的虚函数表，该虚表存放的是基类虚函数的入口地址</li>
<li>派生类继承基类时，就会吸收基类的虚函数，创建派生类对象时，也会在其内存布局的开始位置产生一个虚函数指针，指向派生类自己的虚函数表，如果派生类对该虚函数进行重定义，就会将虚表中的虚函数入口地址进行替换，否则，仍然保存基类的虚函数的入口地址</li>
</ul>
</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://southwindi.xyz/post-images/1625044212943.png" alt="" loading="lazy"></figure>
<pre><code class="language-c++">#include &lt;iostream&gt;
using std::cout;
using std::endl;

class Base
{
public:
    Base(int base = 0):base_(base)
    {
        cout &lt;&lt; &quot;Base()&quot; &lt;&lt; endl;
    }

    virtual void print()
    {
        cout &lt;&lt; &quot;Base::base_ = &quot; &lt;&lt; base_ &lt;&lt; endl;
    }

    ~Base()
    {
        cout &lt;&lt; &quot;~Base()&quot; &lt;&lt; endl;
    }
private:
    long base_;
};

class Derived
:public Base
{
public:
    Derived(int base, int derived):Base(base), derived_(derived)
    {
        cout &lt;&lt; &quot;Derived()&quot; &lt;&lt; endl;
    }

    void print()
    {
        cout &lt;&lt; &quot;Derived::derived_ = &quot; &lt;&lt; derived_ &lt;&lt; endl;
    }

    ~Derived()
    {
        cout &lt;&lt; &quot;~Derived()&quot; &lt;&lt; endl;
    }

private:
    long derived_;
};

void func(Base* pbase)
{
    pbase-&gt;print();
}

int main()
{
    cout &lt;&lt; &quot;sizeof(Base) = &quot; &lt;&lt; sizeof(Base) &lt;&lt; endl;
    cout &lt;&lt; &quot;sizeof(Derived) = &quot; &lt;&lt; sizeof(Derived) &lt;&lt; endl;
    Base base(10);
    Derived derived(20, 30);
    func(&amp;base);
    func(&amp;derived);
    return 0;
}
/*
测试结果：
sizeof(Base) = 16	//base_占8字节、虚函数指针占8字节
sizeof(Derived) = 24//base_占8字节、derived_占8字节、虚函数指针占8字节
Base()
Base()
Derived()
Base::base_ = 10
Derived::derived_ = 30
~Derived()
~Base()
~Base()
*/
</code></pre>
<ol start="6">
<li>
<p>动态激活的五个条件</p>
<ul>
<li>基类定义了虚函数</li>
<li>派生类重定义了该虚函数</li>
<li>创建派生类对象</li>
<li>基类指针指向派生类</li>
<li>基类指针调用虚函数</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://southwindi.xyz/post/hello-gridea/</id>
        <link href="https://southwindi.xyz/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>