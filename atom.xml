<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://southwindi.xyz</id>
    <title>mio^</title>
    <updated>2021-07-03T09:43:30.908Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://southwindi.xyz"/>
    <link rel="self" href="https://southwindi.xyz/atom.xml"/>
    <subtitle>月夜棹孤舟</subtitle>
    <logo>https://southwindi.xyz/images/avatar.png</logo>
    <icon>https://southwindi.xyz/favicon.ico</icon>
    <rights>All rights reserved 2021, mio^</rights>
    <entry>
        <title type="html"><![CDATA[C++]]></title>
        <id>https://southwindi.xyz/post/c/</id>
        <link href="https://southwindi.xyz/post/c/">
        </link>
        <updated>2021-06-30T08:46:31.000Z</updated>
        <summary type="html"><![CDATA[<p>😅😅😅C/C++学习笔记😨</p>
]]></summary>
        <content type="html"><![CDATA[<p>😅😅😅C/C++学习笔记😨</p>
<!-- more -->
<h1 id="继承">继承</h1>
<ol>
<li>
<p>继承的概念：在既有类的基础上产生新的类</p>
<pre><code class="language-c++">class 派生类
:public/protected/private 基类
{
    
};
</code></pre>
</li>
<li>
<p>派生类的生成过程：</p>
<ul>
<li>
<p><strong>吸收</strong>基类成员（数据成员+成员函数）</p>
</li>
<li>
<p><strong>改造</strong>基类成员</p>
</li>
<li>
<p><strong>添加</strong>自己的新成员</p>
</li>
</ul>
</li>
<li>
<p>继承的局限：无法继承的</p>
<ul>
<li>
<p>构造函数</p>
</li>
<li>
<p>析构函数</p>
</li>
<li>
<p>用户重载的赋值运算符</p>
</li>
<li>
<p>用户重载的new/delete运算符</p>
</li>
<li>
<p>友元关系</p>
</li>
</ul>
</li>
<li>
<p>派生类的继承方式：</p>
<ul>
<li>
<p>public（公有）继承</p>
</li>
<li>
<p>protected（保护型）继承</p>
</li>
<li>
<p>private（私有）继承</p>
</li>
</ul>
</li>
<li>
<p>派生类的访问权限：</p>
<table>
<thead>
<tr>
<th style="text-align:center">继承方式</th>
<th style="text-align:left">基类成员访问权限</th>
<th style="text-align:left">在派生类中访问权限</th>
<th style="text-align:left">派生类对象访问</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">公有继承</td>
<td style="text-align:left">public <br>protected <br>private</td>
<td style="text-align:left">public <br>protected <br>不可直接访问</td>
<td style="text-align:left">可直接访问 <br>不可直接访问 <br>不可直接访问</td>
</tr>
<tr>
<td style="text-align:center">保护继承</td>
<td style="text-align:left">public <br>protected <br>private</td>
<td style="text-align:left">protected <br>protected <br>不可直接访问</td>
<td style="text-align:left">不可直接访问</td>
</tr>
<tr>
<td style="text-align:center">私有继承</td>
<td style="text-align:left">public <br>protected <br>private</td>
<td style="text-align:left">private <br>private <br>不可直接访问</td>
<td style="text-align:left">不可直接访问</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>基类中除了私有成员外，在派生类中都可以访问（私有成员不能<strong>直接</strong>访问）</p>
</li>
<li>
<p>派生类对象只能访问<strong>公有继承</strong>下基类中的<strong>公有</strong>成员（其他成员均不可<strong>直接</strong>访问）</p>
</li>
</ul>
</li>
<li>
<p>派生类对象的<strong>构造</strong></p>
<p><strong>原则</strong>：</p>
<ul>
<li>先构造基类部分，后构造派生类部分；</li>
<li>必须将基类构造函数放在派生类构造函数的初始化列表中</li>
</ul>
<p><strong>顺序</strong>：</p>
<ul>
<li>完成对象所占整块内存的开辟，由系统在调用构造函数时自动完成</li>
<li>调用基类的构造函数完成基类成员的初始化</li>
<li>若派生类中含有<strong>对象成员、const成员、引用成员</strong>，则必须在初始化列表中完成其初始化</li>
<li>完成派生类添加的成员的初始化</li>
</ul>
<pre><code class="language-c++">派生类名(总参数表): 基类构造函数(参数表)
{
   //函数体 
};
</code></pre>
<p>（1）情况一：</p>
<ul>
<li>派生类显示定义构造函数</li>
<li>基类没有显示定义构造函数（只有默认构造函数）</li>
<li>自动调用基类缺省的无参构造函数。（<strong>注意</strong>：在创建派生类对象时，会调用其构造函数，为了初始化从基类吸收来的数据成员，会调用基类的构造函数完成初始化任务，然后再初始化派生类自己的数据成员，进而执行派生类自己的构造函数）</li>
</ul>
<p>（2）情况二：</p>
<ul>
<li>派生类没有显示定义构造函数（只有默认构造函数）</li>
<li>基类有显示定义构造函数</li>
<li>此时基类必须拥有默认构造函数（<strong>注意</strong>：若不显示的对基类数据成员进行初始化，则会调用基类默认构造函数，若没有默认构造函数，则会报错）</li>
</ul>
<p>（3）情况三：</p>
<ul>
<li>如果派生类有构造函数、基类有默认构造函数</li>
<li>创建派生类的对象时（未显示初始化基类数据成员），基类的默认构造函数会自动调用</li>
<li>如果你想调用基类的有参构造函数，必须要在派生类构造函数的初始化列表中显示调用基类的有参构造函数</li>
</ul>
<p>（4）情况四：</p>
<ul>
<li>派生类和基类都有构造函数</li>
<li>基类没有无参构造函数</li>
<li>派生类构造函数必须显示初始化基类数据成员</li>
</ul>
</li>
<li>
<p>派生类的<strong>销毁</strong></p>
<p><strong>顺序</strong>：</p>
<ul>
<li>先调用派生类的析构函数</li>
<li>在调用派生类中成员对象的析构函数</li>
<li>最后调用基类的析构函数（<strong>注意</strong>：基类机构函数会被自动调用）</li>
</ul>
</li>
<li>
<p>多基继承（多基派生）</p>
<pre><code class="language-c++">class 派生类
:public/protected/private
,...
,public/protected/private
{
    
};
</code></pre>
<p><strong>构造与析构</strong>：</p>
<ul>
<li>每一个基类前都要加上相应的继承方式</li>
<li>多个基类构造函数在派生类中的调用顺序与派生类继承基类的顺序一致，与初始化列表的顺序无关</li>
</ul>
<p><strong>多基继承存在两个问题</strong>：</p>
<ul>
<li>成员名冲突的二义性：类D继承自类A、类B、类C，使用类名+作用域限定符解决</li>
<li>菱形继承的二义性问题：类B、类C继承自类A，类D继承自类B、类C，使用B/C虚拟继承A解决（在对象存储布局开始位置产生一个虚基指针）</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://southwindi.xyz/post-images/1625059598880.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>基类与派生类间的相互转换</p>
<p><strong>派生类适应于基类（向上转型）</strong>：</p>
<ul>
<li>派生类对象可以赋值给基类对象	base = derived</li>
<li>基类对象可以绑定到派生类对象    Base&amp; base = derived</li>
<li>声明基类的指针可以指向派生类的对象    Base* base = &amp;derived</li>
</ul>
<p>如果函数的形参是基类对象、基类对象的引用、基类对象的指针类型，在进行函数调用时，相应的实参可以是派生类对象</p>
<p><strong>基类不适应于派生类（向下转型）</strong>：C++语法规则不承认，只能利用强制转换</p>
<ul>
<li>若用派生类指针指向基类对象，派生类指针可以操作的内存可能超越基类数据成员所占用的内存，造成内存越界</li>
<li>强制转换：Derived* derived = static_cast&lt;Derived*&gt;(&amp;base)，不安全的向下转型</li>
<li>强制转换：Base* base = &amp;derived1;   Derived* derived2 = static_cast&lt;Derived*&gt;(base)，安全的向下转型</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://southwindi.xyz/post-images/1625063589752.png" alt="" loading="lazy"></figure>
</li>
</ol>
<h1 id="多态">多态</h1>
<ol>
<li>
<p>多态：通常指对于同一个消息、同一种调用，在不同的场合，针对不同的对象下，执行不同的行为。</p>
</li>
<li>
<p>使用多态的原因</p>
<ul>
<li>代码复用</li>
<li>解决紧耦合问题，提高程序的扩展性</li>
</ul>
</li>
<li>
<p>多态的类型</p>
<ul>
<li>静态多态（编译时多态）：函数重载、运算符重载、模板（编译时确定）</li>
<li>动态多态（运行时多态）：通过<strong>虚函数</strong>体现（运行时确定）</li>
</ul>
</li>
<li>
<p>虚函数定义</p>
<ul>
<li>在基类中被声明为<strong>virtual</strong>，并在一个或者多个派生类中被<strong>重新定义</strong>的成员函数</li>
<li>如果一个基类的成员函数定义为虚函数，那么它在所有的派生类中也为虚函数，即使省略了virtual关键字</li>
<li>虚函数在派生类中<strong>重新定义</strong>时，除函数体外，其格式应保持基类的虚函数相同</li>
</ul>
</li>
<li>
<p>虚函数的实现机制</p>
<ul>
<li>基类中定义一个虚函数后，创建基类对象时，会在其存储布局的开始位置产生一个虚函数指针，该虚函数指针指向基类的虚函数表，该虚表存放的是基类虚函数的入口地址</li>
<li>派生类继承基类时，就会吸收基类的虚函数，创建派生类对象时，也会在其内存布局的开始位置产生一个虚函数指针，指向派生类自己的虚函数表，如果派生类对该虚函数进行重定义，就会将虚表中的虚函数入口地址进行替换，否则，仍然保存基类的虚函数的入口地址</li>
</ul>
</li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://southwindi.xyz/post-images/1625044212943.png" alt="" loading="lazy"></figure>
<pre><code class="language-c++">#include &lt;iostream&gt;
using std::cout;
using std::endl;

class Base
{
public:
    Base(int base = 0):base_(base)
    {
        cout &lt;&lt; &quot;Base()&quot; &lt;&lt; endl;
    }

    virtual void print()
    {
        cout &lt;&lt; &quot;Base::base_ = &quot; &lt;&lt; base_ &lt;&lt; endl;
    }

    ~Base()
    {
        cout &lt;&lt; &quot;~Base()&quot; &lt;&lt; endl;
    }
private:
    long base_;
};

class Derived
:public Base
{
public:
    Derived(int base, int derived):Base(base), derived_(derived)
    {
        cout &lt;&lt; &quot;Derived()&quot; &lt;&lt; endl;
    }

    void print()
    {
        cout &lt;&lt; &quot;Derived::derived_ = &quot; &lt;&lt; derived_ &lt;&lt; endl;
    }

    ~Derived()
    {
        cout &lt;&lt; &quot;~Derived()&quot; &lt;&lt; endl;
    }

private:
    long derived_;
};

void func(Base* pbase)
{
    pbase-&gt;print();
}

int main()
{
    cout &lt;&lt; &quot;sizeof(Base) = &quot; &lt;&lt; sizeof(Base) &lt;&lt; endl;
    cout &lt;&lt; &quot;sizeof(Derived) = &quot; &lt;&lt; sizeof(Derived) &lt;&lt; endl;
    Base base(10);
    Derived derived(20, 30);
    func(&amp;base);
    func(&amp;derived);
    return 0;
}
/*
测试结果：
sizeof(Base) = 16	//base_占8字节、虚函数指针占8字节
sizeof(Derived) = 24//base_占8字节、derived_占8字节、虚函数指针占8字节
Base()
Base()
Derived()
Base::base_ = 10
Derived::derived_ = 30
~Derived()
~Base()
~Base()
*/
</code></pre>
<ol start="6">
<li>
<p>动态激活的五个条件</p>
<ul>
<li>基类定义了虚函数</li>
<li>派生类重定义了该虚函数</li>
<li>创建派生类对象</li>
<li>基类指针指向派生类</li>
<li>基类指针调用虚函数</li>
</ul>
</li>
<li>
<p>不能设置为虚函数的函数</p>
<ul>
<li>普通函数：定义虚函数的目的是为了重写达到多态，将普通函数声明为虚函数没有意义，编译器在编译时就绑定了它</li>
<li>静态成员函数：静态成员函数对于每个类都只有一份代码，所有对象都可共享这段代码，没有动态绑定的必要（静态函数发生在编译时，虚函数体现多态发生在运行时）</li>
<li>内联成员函数：内联函数的目的是减少函数调用的代价，其在代码中直接展开。但虚函数需要创建虚函数表，二者不能统一。而且，内联函数在编译时被展开，虚函数在运行时才动态绑定</li>
<li>构造函数：从语义上讲，构造函数用于初始化对象，此时对象还没有完全生成，其内存布局也还不完整，虚函数指针还不存在</li>
<li>友元函数：普通函数声明为一个类友元时，它并不是该类的成员函数，自然不能在该类中将其声明为虚函数。但一个成员函数可以在其所在类中声明为虚函数，同时作为另一个类的友元。</li>
</ul>
</li>
<li>
<p>虚函数的访问</p>
<ul>
<li>
<p>指针访问：</p>
<p>（1）使用指针访问非虚函数时，编译器根据指针本身的类型来决定调用的函数，而不是根据指针所指对象的类型</p>
<p>（2）使用指针访问虚函数时，编译器根据指针所指对象的类型来决定要调用的函数（<strong>动态</strong>），而与指针的类型无关</p>
</li>
<li>
<p>引用访问：与指针类似，不同在于引用一经声明，不管引用变量自身如何改变，其调用的函数不会再改变</p>
</li>
<li>
<p>对象访问：通过对象名来调用，此时编译器采用<strong>静态联编</strong>，无法体现多态特性</p>
</li>
<li>
<p>成员函数中访问：在类的成员函数中访问该类层次中的虚函数，采用动态联编，要使用this指针</p>
</li>
<li>
<p>在构造、析构函数中访问：采用静态联编</p>
</li>
</ul>
</li>
</ol>
<h1 id="移动语义">移动语义</h1>
<h2 id="右值引用">右值引用</h2>
]]></content>
    </entry>
</feed>