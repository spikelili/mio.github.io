<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://southwindi.xyz</id>
    <title>mio^</title>
    <updated>2021-07-21T13:13:36.831Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://southwindi.xyz"/>
    <link rel="self" href="https://southwindi.xyz/atom.xml"/>
    <subtitle>月夜棹孤舟</subtitle>
    <logo>https://southwindi.xyz/images/avatar.png</logo>
    <icon>https://southwindi.xyz/favicon.ico</icon>
    <rights>All rights reserved 2021, mio^</rights>
    <entry>
        <title type="html"><![CDATA[C++]]></title>
        <id>https://southwindi.xyz/post/c/</id>
        <link href="https://southwindi.xyz/post/c/">
        </link>
        <updated>2021-06-30T08:46:31.000Z</updated>
        <summary type="html"><![CDATA[<p>😅😅😅C/C++学习笔记😨</p>
]]></summary>
        <content type="html"><![CDATA[<p>😅😅😅C/C++学习笔记😨</p>
<!-- more -->
<h1 id="hello-world">hello world</h1>
<pre><code class="language-c++">#include &lt;iostream&gt;
//c++头文件没有.h后缀：c++的头文件使用模板进行编写的
//模板的特点：必须要知道所有的实现才能正常进行编译

//命名空间
using namespace std;

//函数声明,以分号结尾
//函数声明可以有多次
void test();

//函数定义，以花括号结尾
//函数定义只能有一次
void test1(){  }

int main()
{
    //c中的写法
    printf(&quot;hello world\n&quot;);

    //cout，标准输出流
    //&lt;&lt;，输出流运算符
    //&quot;Hello world&quot;，字符串常量
    //endl，换行,end of line
    cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;

    //对输出流运算符进行了重载
    operator&lt;&lt;(cout, &quot;Hello world&quot;);
    cout.operator&lt;&lt;(endl);

    operator&lt;&lt;(cout, &quot;Hello world&quot;).operator&lt;&lt;(endl);

    //cin，标准输入流
    //&gt;&gt;，输入流运算符
    int num = 10;
    cin &gt;&gt; num;
    cout &lt;&lt; num &lt;&lt; endl;
    return 0;
}
</code></pre>
<h1 id="c基础">C++基础</h1>
<h2 id="命名空间">命名空间</h2>
<p><strong>1.命名空间的作用</strong></p>
<ul>
<li>解决名字冲突（同一个作用域中有两个或多个同名实体）</li>
</ul>
<p><strong>2.命名空间定义和访问</strong></p>
<ul>
<li>命名空间中可以定义变量、常量、函数、结构体、类、模板、命名空间</li>
</ul>
<pre><code class="language-c++">namespace wd
{
void print()
{
    cout &lt;&lt; &quot;void print()&quot; &lt;&lt; endl;
}
}

void test()
{
    print();//error
    //采用命名空间名字+作用域限定符
    wd::print();//ok
}

//可以扩展命名空间（包括标准命名空间）
namespace wd
{
int number = 10;
}
</code></pre>
<p><strong>3.命名空间的三种使用形式</strong></p>
<ul>
<li>using编译指令</li>
</ul>
<pre><code class="language-c++">//一次性将命名空间中的全部实体引出
//使用方便，但是还是容易产生名字冲突
using namespace std;
</code></pre>
<ul>
<li>作用域限定符</li>
</ul>
<pre><code class="language-c++">//每次使用某个命名空间的实体时，都以'命名空间::实体'的形式
//降低了冲突的概率，但显得比较冗余
void print()
{
	std::cout &lt;&lt; &quot;hello&quot; &lt;&lt; std::endl;    
}
</code></pre>
<ul>
<li>using声明机制</li>
</ul>
<pre><code class="language-c++">//using声明机制的作用域是从using语句开始到using所在的作用域结束
//同一作用域中，声明的不同命名空间的实体，不能同名，否则发生重定义
using std::endl;
using std::cout;
</code></pre>
<p><strong>4.匿名命名空间</strong></p>
<ul>
<li>只在本文件的作用域内有效，它的作用域是从匿名命名空间声明开始到本文件结束</li>
</ul>
<pre><code class="language-c++">//全局变量
int val = 10;

//wd命名空间
namespace wd
{
    int val = 20;
}

//匿名命名空间
namespace 
{
int number = 10;
}

void test()
{
    int val = 30;
    //全局变量，匿名命名空间
    cout &lt;&lt; ::val &lt;&lt; endl;
    cout &lt;&lt; ::number &lt;&lt; endl;
    //wd中实体
    cout &lt;&lt; wd::val &lt;&lt; endl;
    //局部变量
    cout &lt;&lt; val &lt;&lt; endl;
    //兼容c语言，printf()全局唯一，所以可以不加::
    printf(&quot;hello&quot;);
    ::printf(&quot;hello&quot;);
}
</code></pre>
<p><strong>5.总结</strong></p>
<ul>
<li>提倡在已命名的名称空间中定义变量，而不是直接定义外部全局变量或者静态全局变量</li>
<li>如果开发了一个函数库或者类库，提倡将其放在一个名称空间中</li>
<li>对于using 声明，首先将其作用域设置为局部而不是全局</li>
<li>不要在头文件中使用using编译指令，这样，使得可用名称变得模糊，容易出现二义性</li>
<li>包含头文件的顺序可能会影响程序的行为，如果非要使用using编译指令，建议放在所有#include预编译指令后</li>
</ul>
<h2 id="const关键字的用法">const关键字的用法</h2>
<p><strong>1.修饰普通变量</strong></p>
<pre><code class="language-c++">void test()
{
    //const修饰的变量称为const常量，常量是不可以修改的
    const int number1 = 10;//初始化
    int const number2 = 20;//const在int前后无影响
    number = 20;//error，不能修改常量（赋值操作）
    const int val;//error，常量必须初始化
}
</code></pre>
<ul>
<li>
<p>const常量和宏定义的区别？</p>
<p>（1）编译器处理方式不同。宏定义在预处理阶段展开，做字符串替换；而const常量是在编译时确定</p>
<p>（2）类型和安全检查不同。宏定义没有类型，不做任何检查，运行时bug才会体现；const常量有具体的类型，在编译时会执行检查</p>
<p>（3）在使用中应尽量使用const替换宏定义，可以减小犯错的概率</p>
</li>
</ul>
<p><strong>2.修饰指针</strong></p>
<pre><code class="language-c++">void test()
{
    int val1 = 10;
    //指向val1
    int* p1 = &amp;val1;
    //修改指向的值
    *p1 = 1;
    //修改指针指向
    p1 = nullptr;//c++11中定义的空指针形式
    
    int val2 = 20;
    //const修饰*p2，为常量指针（point to const），*p2不能修改
    const int* p2 = &amp;val2;
    *p2 = 22;//error，不能修改指针所指的值
    p2 = &amp;val1;//ok，可以改变指针的指向
    
    int val3 = 30;
    //const修饰p3，为指针常量（const point），p3不能修改
    int* const p3 = &amp;val3;
    *p3 = 33;//ok，可以修改指针所指的值
    p3 = &amp;val1;//error，不可以改变指针的指向
    
    int val4 = 40;
    //指针指向、指针指向的值都不能改变
    const int* const p4 = &amp;val4;
    *p4 = 44;//error
    p4 = &amp;val1;//error
    
    
    //函数指针
    int (*pf)();
    //指针函数
    int* func();
    //数组指针
    int (*pArray)[];
    //指针数组
    int* pArray[];
}
</code></pre>
<p><strong>3.const修饰成员函数</strong></p>
<pre><code class="language-c++">//const成员函数的this指针类型为const * const（双const）
//不能修改数据成员
class test
{
public:
    void show() const
    {
        cout &lt;&lt; &quot;show()&quot; &lt;&lt; endl;
    }
};
</code></pre>
<p><strong>4.const修饰对象</strong></p>
<pre><code class="language-c++">//只能在初始化列表中进行初始化，且不能修改
class test
{
public:
    test(int x): _x(x){ }
private:
    const int _x;
};
</code></pre>
<h2 id="newdelete表达式">new/delete表达式</h2>
<ul>
<li>
<p>malloc/free</p>
<pre><code class="language-c++">//1.申请空间
int* pInt = (int*)malloc(sizeof(int));
//2.初始化
memset(pInt, 0, sizeof(int));
//3.赋值
*pInt = 10;
//4.释放
free(pInt);
pInt = nullptr;
</code></pre>
</li>
<li>
<p>new/delete</p>
<pre><code class="language-c++">//1.申请空间、初始化、赋值
int* pInt = new int(100);
//2.释放
delete pInt;
pInt = nullptr;
</code></pre>
</li>
<li>
<p>new和malloc的区别</p>
<p>（1）new分配内存按照<strong>数据类型</strong>进行分配，malloc分配内存按照指定的<strong>大小</strong>分配</p>
<p>（2）new返回的是指定对象的指针，而malloc返回的是void*，因此malloc的返回值一般都需要进行类型转化</p>
<p>（3）new不仅分配一段内存，而且会调用构造函数，malloc不会</p>
<p>（4）new分配的内存要用delete销毁，malloc要用free来销毁；delete销毁的时候会调用对象的析构函数，而free则不会</p>
<p>（5）new是一个<strong>操作符</strong>可以重载，malloc是一个<strong>库函数</strong></p>
<p>（6）malloc分配的内存不够的时候，可以用realloc扩容</p>
<p>（7）new如果分配失败了会抛出bad_malloc的异常，而malloc失败了会返回NULL</p>
<p>（8）申请数组时：new[]一次分配所有内存，多次调用构造函数，搭配使用delete[]，delete[]多次调用析构函数，销毁数组中的每个对象。而malloc则只能sizeof(int) * n</p>
</li>
<li>
<p>内存溢出<br>
指程序申请内存时，没有足够的内存供申请者使用。内存溢出就是你要的内存空间超过了系统实际分配给你的空间，此时系统相当于没法满足你的需求，就会报内存溢出的错误</p>
</li>
<li>
<p>内存溢出原因：<br>
内存中加载的数据量过于庞大，如一次从数据库取出过多数据集合类中有对对象的引用，使用完后未清空，使得不能回收<br>
代码中存在死循环或循环产生过多重复的对象实体使用的第三方软件中的BUG启动参数内存值设定的过小</p>
</li>
<li>
<p>内存泄漏<br>
内存泄漏是指由于疏忽或错误造成了程序未能释放掉不再使用的内存的情况。内存泄漏并非指内存在物理上的消失，<br>
而是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制，因而造成了内存的浪费。</p>
</li>
<li>
<p>内存泄漏的分类：<br>
（1）堆内存泄漏 （Heap leak）。对内存指的是程序运行中根据需要分配通过malloc,realloc new等从堆中分配的一块内存，<br>
再是完成后必须通过调用对应的 free或者delete 删掉。如果程序的设计的错误导致这部分内存没有被释放，<br>
那么此后这块内存将不会被使用，就会产生Heap Leak。<br>
（2）系统资源泄露（Resource Leak）。主要指程序使用系统分配的资源比如 Bitmap,handle ,SOCKET等没有使用<br>
相应的函数释放掉，导致系统资源的浪费，严重可导致系统效能降低，系统运行不稳定。<br>
（3）没有将基类的析构函数定义为虚函数。当基类指针指向子类对象时，如果基类的析构函数不是virtual，那么子类<br>
的析构函数将不会被调用，子类的资源没有正确是释放，因此造成内存泄露</p>
</li>
<li>
<p>野指针就是指向一个已删除的对象或者未申请访问受限内存区域的指针</p>
</li>
</ul>
<h2 id="引用">引用</h2>
<ul>
<li>变量的别名</li>
</ul>
<pre><code class="language-c++">void test()
{
    int num = 10;
    //引用，变量的别名
    int &amp;ref = num;
    
  	int num2 = 200;
    //对引用的操作与操作变量本身是一样的效果
    ref = num2;//num = num2;
    
    //引用的底层实现就是一个指针常量
    int &amp;ref1;//error，引用在定义时必须进行初始化，必须绑定到对象上，一旦绑定就无法改变绑定对象
}
</code></pre>
<ul>
<li>
<p>引用作为函数参数</p>
<pre><code class="language-c++">//提高函数的时空效率
void swap(int &amp;x, int &amp;y)
{
    int tmp = x;
    x = y;
    y = tmp;
}
</code></pre>
</li>
<li>
<p>引用作为函数返回值</p>
<pre><code class="language-c++">//不能在函数内部返回new分配的堆空间变量引用，造成内存泄漏
int arr[10] = {1,3,5,7,9};
int &amp;func(int sz)
{
    return arr[sz];
}

//error，不能返回局部变量的引用，造成未知错误
int &amp;number
{
    int number = 10;
    return number;
}
</code></pre>
</li>
<li>
<p>总结</p>
<p>（1）在引用的使用中，单纯给某个变量取个别名是毫无意义的，引用的目的主要用于在函数参数传递中，解决大块数据或对象的传递效率和空间不如意的问题。<br>
（2）用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过const的使用，保证了引用传递的安全性<br>
（3）引用与指针的区别是，指针通过某个指针变量指向一个变量后，对它所指向的变量间接操作。程序中使用指针，程序的可读性差；而引用本身就是目标变量的别名，对引用操作就是对目标变量的操作</p>
</li>
</ul>
<h2 id="强制类型转换">强制类型转换</h2>
<ul>
<li>
<p>static_cast</p>
<pre><code class="language-c++">//用于基本类型之间的转换
//将void* 转化成其他类型的指针
int inumber = 10;
float fnumber = 0;
fnumber = (float)inumber;
fnumber = static_cast&lt;float&gt;(inumber);
</code></pre>
</li>
<li>
<p>const_cast</p>
<pre><code class="language-c++">//去掉const属性
const int number = 10;
int *p = const_cast&lt;int*&gt;(&amp;number);
</code></pre>
</li>
</ul>
<h2 id="函数重载">函数重载</h2>
<ul>
<li>
<p>规则</p>
<p>（1）函数名必须相同</p>
<p>（2）参数列表必须不同（类型、个数、顺序）</p>
<p>（3）返回值可以相同、可以不同</p>
<p>（4）仅仅返回值不同，不是函数重载</p>
<pre><code class="language-c++">//c不支持函数重载
//c++支持函数重载，如何实现的？
//使用 nm 命令查看.o文件
//原理：c++会对函数名字做一个改编
//在同一个作用域中，当函数名字相同时，会根据参数类型、个数、顺序进行改编

//在c++中，按c的方式进行编译，同时兼任gcc
#ifdef __cplusplus
extern &quot;C&quot;
{
#endif
int add(int x, int y)
{
    return x + y;
}
#ifdef __cplusplus
}//end of extern &quot;C&quot;
#endif
</code></pre>
</li>
</ul>
<h2 id="默认参数">默认参数</h2>
<pre><code class="language-c++">//传入参数缺省时，使用默认参数
int add(int x, int y, int z = 0)
{
    return x + y + z;
}

//设计默认参数时，应从右边往左边连续赋值
//从右往左入栈，所以要先给右边赋值
int add(int x = 0, int y);//error
int add(int x, int y = 0);//ok

//应注意二义性的问题
//在调用add(x, y)时无法区分是哪一个函数
int add(int x, int y, int z = 0);
int add(int x, int y);
</code></pre>
<h2 id="bool类型">bool类型</h2>
<pre><code class="language-c++">//bool占一个字节
bool flag = false;//0为false
bool flag2 = true;//非0为true
</code></pre>
<h2 id="inline函数">inline函数</h2>
<pre><code class="language-c++">//内联函数在声明时必须要看到实现，不能将头文件与实现文件分开
//若要将其分开，需要在头文件中包含其实现文件'.tcc'
inline int add(int x, int y)
{
    return x + y;
}

//注意事项：函数体中不要包含循环等复杂语句
</code></pre>
<h2 id="异常安全">异常安全</h2>
<pre><code class="language-c++">void test()
{
    int x, y;
    cin &gt;&gt; x &gt;&gt; y;
    try
    {
        if(0 == y)
        {
            throw y;//抛出异常
        }
        else
        {
            cout &lt;&lt; x &lt;&lt; y &lt;&lt; endl;
        }
    }
    catch(int ix)
    {
        cout &lt;&lt; &quot;catch(int)&quot; &lt;&lt; endl;
    }
    catch(double dx)
    {
        cout &lt;&lt; &quot;catch(double)&quot; &lt;&lt; endl;
    }
}
</code></pre>
<h2 id="字符串">字符串</h2>
<pre><code class="language-c++">//c风格字符串，采用'\0'结尾，长度+1
char str1[] = &quot;hello&quot;;
char str2[] = &quot;world&quot;;
//可以修改内容，不能改变指针指向
str1[0] = 'H';//ok
str1 = nullptr;//error

//可以修改指针指向，但不能修改所指的值
char *pstr = &quot;helloworld&quot;;
const char *pstr1 = &quot;helloword&quot;;//c++中加const
pstr[0] = 'H';//error，段错误，无法修改
pstr = &quot;12345&quot;;

char *pstr2 = static_cast&lt;char *&gt;(malloc(len));

//c风格字符串可以直接转化为string
string str = &quot;eee&quot;;
//string不能直接转化为c风格字符串
const char *pstr = str.c_str();
</code></pre>
<h2 id="内存布局">内存布局</h2>
<h1 id="类和对象">类和对象</h1>
<h1 id="继承">继承</h1>
<ol>
<li>
<p>继承的概念：在既有类的基础上产生新的类</p>
<pre><code class="language-c++">class 派生类
:public/protected/private 基类
{
    
};
</code></pre>
</li>
<li>
<p>派生类的生成过程：</p>
<ul>
<li>
<p><strong>吸收</strong>基类成员（数据成员+成员函数）</p>
</li>
<li>
<p><strong>改造</strong>基类成员</p>
</li>
<li>
<p><strong>添加</strong>自己的新成员</p>
</li>
</ul>
</li>
<li>
<p>继承的局限：无法继承的</p>
<ul>
<li>
<p>构造函数：派生类有新增的数据成员，基类的构造函数无法初始化新增的成员</p>
</li>
<li>
<p>析构函数：派生类有新增的数据成员，基类的析构函数无法销毁新增的成员</p>
</li>
<li>
<p>用户重载的赋值运算符</p>
</li>
<li>
<p>用户重载的new/delete运算符</p>
</li>
<li>
<p>友元关系</p>
</li>
</ul>
</li>
<li>
<p>派生类的继承方式：</p>
<ul>
<li>
<p>public（公有）继承</p>
</li>
<li>
<p>protected（保护型）继承</p>
</li>
<li>
<p>private（私有）继承</p>
</li>
</ul>
</li>
<li>
<p>派生类的访问权限：</p>
<table>
<thead>
<tr>
<th style="text-align:center">继承方式</th>
<th style="text-align:left">基类成员访问权限</th>
<th style="text-align:left">在派生类中访问权限</th>
<th style="text-align:left">派生类对象访问</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">公有继承</td>
<td style="text-align:left">public <br>protected <br>private</td>
<td style="text-align:left">public <br>protected <br>不可直接访问</td>
<td style="text-align:left">可直接访问 <br>不可直接访问 <br>不可直接访问</td>
</tr>
<tr>
<td style="text-align:center">保护继承</td>
<td style="text-align:left">public <br>protected <br>private</td>
<td style="text-align:left">protected <br>protected <br>不可直接访问</td>
<td style="text-align:left">不可直接访问</td>
</tr>
<tr>
<td style="text-align:center">私有继承</td>
<td style="text-align:left">public <br>protected <br>private</td>
<td style="text-align:left">private <br>private <br>不可直接访问</td>
<td style="text-align:left">不可直接访问</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>基类中除了私有成员外，在派生类中都可以访问（私有成员不能<strong>直接</strong>访问）</p>
</li>
<li>
<p>派生类对象只能访问<strong>公有继承</strong>下基类中的<strong>公有</strong>成员（其他成员均不可<strong>直接</strong>访问）</p>
</li>
</ul>
</li>
<li>
<p>派生类对象的<strong>构造</strong></p>
<p><strong>原则</strong>：</p>
<ul>
<li>先构造基类部分，后构造派生类部分；</li>
<li>必须将基类构造函数放在派生类构造函数的初始化列表中</li>
</ul>
<p><strong>顺序</strong>：</p>
<ul>
<li>完成对象所占整块内存的开辟，由系统在调用构造函数时自动完成</li>
<li>调用基类的构造函数完成基类成员的初始化</li>
<li>若派生类中含有<strong>对象成员、const成员、引用成员</strong>，则必须在初始化列表中完成其初始化</li>
<li>完成派生类添加的成员的初始化</li>
</ul>
<pre><code class="language-c++">派生类名(总参数表): 基类构造函数(参数表)
{
   //函数体 
};
</code></pre>
<p>（1）情况一：</p>
<ul>
<li>派生类显示定义构造函数</li>
<li>基类没有显示定义构造函数（只有默认构造函数）</li>
<li>自动调用基类缺省的无参构造函数。（<strong>注意</strong>：在创建派生类对象时，会调用其构造函数，为了初始化从基类吸收来的数据成员，会调用基类的构造函数完成初始化任务，然后再初始化派生类自己的数据成员，进而执行派生类自己的构造函数）</li>
</ul>
<p>（2）情况二：</p>
<ul>
<li>派生类没有显示定义构造函数（只有默认构造函数）</li>
<li>基类有显示定义构造函数</li>
<li>此时基类必须拥有默认构造函数（<strong>注意</strong>：若不显示的对基类数据成员进行初始化，则会调用基类默认构造函数，若没有默认构造函数，则会报错）</li>
</ul>
<p>（3）情况三：</p>
<ul>
<li>如果派生类有构造函数、基类有默认构造函数</li>
<li>创建派生类的对象时（未显示初始化基类数据成员），基类的默认构造函数会自动调用</li>
<li>如果你想调用基类的有参构造函数，必须要在派生类构造函数的初始化列表中显示调用基类的有参构造函数</li>
</ul>
<p>（4）情况四：</p>
<ul>
<li>派生类和基类都有构造函数</li>
<li>基类没有无参构造函数</li>
<li>派生类构造函数必须显示初始化基类数据成员</li>
</ul>
</li>
<li>
<p>派生类的<strong>销毁</strong></p>
<p><strong>顺序</strong>：</p>
<ul>
<li>先调用派生类的析构函数</li>
<li>在调用派生类中成员对象的析构函数</li>
<li>最后调用基类的析构函数（<strong>注意</strong>：基类机构函数会被自动调用）</li>
</ul>
</li>
<li>
<p>多基继承（多基派生）</p>
<pre><code class="language-c++">class 派生类
:public/protected/private
,...
,public/protected/private
{
    
};
</code></pre>
<p><strong>构造与析构</strong>：</p>
<ul>
<li>每一个基类前都要加上相应的继承方式</li>
<li>多个基类构造函数在派生类中的调用顺序与派生类继承基类的顺序一致，与初始化列表的顺序无关</li>
</ul>
<p><strong>多基继承存在两个问题</strong>：</p>
<ul>
<li>成员名冲突的二义性：类D继承自类A、类B、类C，使用类名+作用域限定符解决</li>
<li>菱形继承的二义性问题：类B、类C继承自类A，类D继承自类B、类C，使用B/C虚拟继承A解决（在对象存储布局开始位置产生一个虚基指针）</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://southwindi.xyz/post-images/1625059598880.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>基类与派生类间的相互转换</p>
<p><strong>派生类适应于基类（向上转型）</strong>：</p>
<ul>
<li>派生类对象可以赋值给基类对象	base = derived</li>
<li>基类对象可以绑定到派生类对象    Base&amp; base = derived</li>
<li>声明基类的指针可以指向派生类的对象    Base* base = &amp;derived</li>
</ul>
<p>如果函数的形参是基类对象、基类对象的引用、基类对象的指针类型，在进行函数调用时，相应的实参可以是派生类对象</p>
<p><strong>基类不适应于派生类（向下转型）</strong>：C++语法规则不承认，只能利用强制转换</p>
<ul>
<li>若用派生类指针指向基类对象，派生类指针可以操作的内存可能超越基类数据成员所占用的内存，造成内存越界</li>
<li>强制转换：Derived* derived = static_cast&lt;Derived*&gt;(&amp;base)，不安全的向下转型</li>
<li>强制转换：Base* base = &amp;derived1;   Derived* derived2 = static_cast&lt;Derived*&gt;(base)，安全的向下转型</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://southwindi.xyz/post-images/1625063589752.png" alt="" loading="lazy"></figure>
</li>
</ol>
<h1 id="多态">多态</h1>
<ol>
<li>
<p>多态：通常指对于同一个消息、同一种调用，在不同的场合，针对不同的对象下，执行不同的行为。</p>
</li>
<li>
<p>使用多态的原因</p>
<ul>
<li>代码复用</li>
<li>解决紧耦合问题，提高程序的扩展性</li>
</ul>
</li>
<li>
<p>多态的类型</p>
<ul>
<li>静态多态（编译时多态）：函数重载、运算符重载、模板（编译时确定）</li>
<li>动态多态（运行时多态）：通过<strong>虚函数</strong>体现（运行时确定）</li>
</ul>
</li>
<li>
<p>虚函数定义</p>
<ul>
<li>在基类中被声明为<strong>virtual</strong>，并在一个或者多个派生类中被<strong>重新定义</strong>的成员函数</li>
<li>如果一个基类的成员函数定义为虚函数，那么它在所有的派生类中也为虚函数，即使省略了virtual关键字</li>
<li>虚函数在派生类中<strong>重新定义</strong>时，除函数体外，其格式应保持基类的虚函数相同</li>
</ul>
</li>
<li>
<p>虚函数的实现机制</p>
<ul>
<li>基类中定义一个虚函数后，创建基类对象时，会在其存储布局的开始位置产生一个虚函数指针，该虚函数指针指向基类的虚函数表，该虚表存放的是基类虚函数的入口地址</li>
<li>派生类继承基类时，就会吸收基类的虚函数，创建派生类对象时，也会在其内存布局的开始位置产生一个虚函数指针，指向派生类自己的虚函数表，如果派生类对该虚函数进行重定义，就会将虚表中的虚函数入口地址进行替换，否则，仍然保存基类的虚函数的入口地址</li>
</ul>
</li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://southwindi.xyz/post-images/1625044212943.png" alt="" loading="lazy"></figure>
<pre><code class="language-c++">#include &lt;iostream&gt;
using std::cout;
using std::endl;

class Base
{
public:
    Base(int base = 0):base_(base)
    {
        cout &lt;&lt; &quot;Base()&quot; &lt;&lt; endl;
    }

    virtual void print()
    {
        cout &lt;&lt; &quot;Base::base_ = &quot; &lt;&lt; base_ &lt;&lt; endl;
    }

    ~Base()
    {
        cout &lt;&lt; &quot;~Base()&quot; &lt;&lt; endl;
    }
private:
    long base_;
};

class Derived
:public Base
{
public:
    Derived(int base, int derived):Base(base), derived_(derived)
    {
        cout &lt;&lt; &quot;Derived()&quot; &lt;&lt; endl;
    }

    void print()
    {
        cout &lt;&lt; &quot;Derived::derived_ = &quot; &lt;&lt; derived_ &lt;&lt; endl;
    }

    ~Derived()
    {
        cout &lt;&lt; &quot;~Derived()&quot; &lt;&lt; endl;
    }

private:
    long derived_;
};

void func(Base* pbase)
{
    pbase-&gt;print();
}

int main()
{
    cout &lt;&lt; &quot;sizeof(Base) = &quot; &lt;&lt; sizeof(Base) &lt;&lt; endl;
    cout &lt;&lt; &quot;sizeof(Derived) = &quot; &lt;&lt; sizeof(Derived) &lt;&lt; endl;
    Base base(10);
    Derived derived(20, 30);
    func(&amp;base);
    func(&amp;derived);
    return 0;
}
/*
测试结果：
sizeof(Base) = 16	//base_占8字节、虚函数指针占8字节
sizeof(Derived) = 24//base_占8字节、derived_占8字节、虚函数指针占8字节
Base()
Base()
Derived()
Base::base_ = 10
Derived::derived_ = 30
~Derived()
~Base()
~Base()
*/
</code></pre>
<ol start="6">
<li>
<p>动态激活的五个条件</p>
<ul>
<li>基类定义了虚函数</li>
<li>派生类重定义了该虚函数</li>
<li>创建派生类对象</li>
<li>基类指针指向派生类</li>
<li>基类指针调用虚函数</li>
</ul>
</li>
<li>
<p>不能设置为虚函数的函数</p>
<ul>
<li>普通函数：定义虚函数的目的是为了重写达到多态，将普通函数声明为虚函数没有意义，编译器在编译时就绑定了它</li>
<li>静态成员函数：静态成员函数对于每个类都只有一份代码，所有对象都可共享这段代码，没有动态绑定的必要（静态函数发生在编译时，虚函数体现多态发生在运行时）</li>
<li>内联成员函数：内联函数的目的是减少函数调用的代价，其在代码中直接展开。但虚函数需要创建虚函数表，二者不能统一。而且，内联函数在编译时被展开，虚函数在运行时才动态绑定</li>
<li>构造函数：从语义上讲，构造函数用于初始化对象，此时对象还没有完全生成，其内存布局也还不完整，虚函数指针还不存在</li>
<li>友元函数：普通函数声明为一个类友元时，它并不是该类的成员函数，自然不能在该类中将其声明为虚函数。但一个成员函数可以在其所在类中声明为虚函数，同时作为另一个类的友元。</li>
</ul>
</li>
<li>
<p>虚函数的访问</p>
<ul>
<li>
<p>指针访问：</p>
<p>（1）使用指针访问非虚函数时，编译器根据指针本身的类型来决定调用的函数，而不是根据指针所指对象的类型</p>
<p>（2）使用指针访问虚函数时，编译器根据指针所指对象的类型来决定要调用的函数（<strong>动态</strong>），而与指针的类型无关</p>
</li>
<li>
<p>引用访问：与指针类似，不同在于引用一经声明，不管引用变量自身如何改变，其调用的函数不会再改变</p>
</li>
<li>
<p>对象访问：通过对象名来调用，此时编译器采用<strong>静态联编</strong>，无法体现多态特性</p>
</li>
<li>
<p>成员函数中访问：在类的成员函数中访问该类层次中的虚函数，采用动态联编，要使用this指针</p>
</li>
<li>
<p>在构造、析构函数中访问：采用静态联编</p>
</li>
</ul>
</li>
</ol>
<h1 id="移动语义">移动语义</h1>
<h2 id="右值引用">右值引用</h2>
<h1 id="标准模板库stl">标准模板库STL</h1>
<p><strong>六大组件</strong></p>
<ul>
<li>
<p>容器：存放数据</p>
</li>
<li>
<p>迭代器：广义指针，容器与算法之间的胶合剂</p>
</li>
<li>
<p>适配器：</p>
</li>
<li>
<p>算法：操作数据</p>
</li>
<li>
<p>函数对象（仿函数）：重载了operator()</p>
</li>
<li>
<p>空间配置器：申请、释放空间</p>
</li>
<li>
<p>这六大组件的交互关系：</p>
<p>（1）container（容器） 通过 allocator（空间配置器） 取得数据储存空间；</p>
<p>（2）algorithm（算法）通过iterator（迭代器）存取 container（容器） 内容；</p>
<p>（3）functor（函数对象、仿函数） 可以协助 algorithm（算法） 完成不同的策略变化；</p>
<p>（4）adapter（适配器） 可以修饰或套接 functor（仿函数）</p>
</li>
</ul>
<h2 id="模板">模板</h2>
<p><strong>1.模板的作用</strong></p>
<ul>
<li>解决强类型语言的严格性与灵活性的冲突：将类型抽象</li>
<li>强类型语言：C++/Java，有类型定义；能进行安全检查；编译型语言；灵活性不够</li>
<li>弱类型语言：js/python，定义变量直接使用let/var，没有严格的类型；解释型语言；错误留到运行时；灵活但不安全</li>
</ul>
<p><strong>2.模板的特征</strong></p>
<ul>
<li>模板的定义</li>
</ul>
<pre><code class="language-c++">//&lt;...&gt;为模板参数列表
template &lt;class/typename T&gt;
</code></pre>
<ul>
<li>函数模板</li>
</ul>
<pre><code class="language-c++">//1.函数模板
//模板不能将声明和实现分开
template &lt;typename T&gt;
T add(T x, T y)
{
    return x + y;
}

//2.普通函数与函数模板
//普通函数与函数模板可以进行重载
//普通函数优先与函数模板执行
int add(int x, int y)
{
    return x + y;
}
//函数模板与函数模板可以进行重载
template &lt;typename T&gt;
T add(T x, T y, T z)
{
    return x + y + z;
}

//3.实例化
//        实例化（类型推导）
//函数模板-----------------&gt;模板函数
void test()
{
    double d = 3.3;
    int a = 3, b = 4;
    //显示实例化add&lt;int&gt;(a, b)
    //显示的写出类型，不需类型推导
    cout &lt;&lt; add&lt;int&gt;(a, b) &lt;&lt; endl;
    //隐式实例化add(a, b)
    //不写出类型，需要类型推导
    cout &lt;&lt; add(a, b) &lt;&lt; endl;
    //如果只有函数模板的形式，不能传递不同类型的参数add(int, double)
    //如果写出具体类型，则可以传递不同类型的参数，会进行隐式转换
    cout &lt;&lt; add(a, d) &lt;&lt; endl;
}

//4.模板的特化
//对于const char*类型的两个对象不能直接进行相加
//全特化：将模板参数全部以特殊形式写出
//偏特化：将模板参数部分以特殊形式写出
template&lt;&gt;
const char *add(const char *p1, const char *p2)
{
    size_t len1 = strlen(p1);
    size_t len2 = strlen(p2);
    size_t len = len1 + len2 + 1;
    char *ptmp = (char*)malloc(len);
    memset(ptmp, 0, len);
    strcpy(ptmp, p1);
    strcat(ptmp, p2);
    return ptmp;
}

//5.模板参数：分为类型参数，非类型参数
//T为类型参数，kMin非类型参数
//非类型参数只能是整型（非double\float）
//类型参数、非类型参数都可以设置默认值
template &lt;typename T = int, short kMin = 10&gt;
T multiply(T x, T y)
{
    return x * y * kMin;
}

//6.成员函数写为模板
class Point
{
public:
    template &lt;typename T = int&gt;
    T func()
    {
        return (T)_dx;
    }
private:
    double _dx;
    double _dy;
};

//7.模板的发生时机
//编译时确定
</code></pre>
<ul>
<li>可变模板参数</li>
</ul>
<pre><code class="language-c++">//1.Args模板参数包
//template &lt;typename T1, typename T2&gt;
template &lt;typename... Args&gt;
//2.args函数参数包
void show(Args... args)
{
    //计算参数包中的参数个数
    cout &lt;&lt; &quot;sizeof...(Args) = &quot; &lt;&lt; sizeof...(Args) &lt;&lt; endl;
    cout &lt;&lt; &quot;sizeof...(args) = &quot; &lt;&lt; sizeof...(args) &lt;&lt; endl;
}

void test1()
{
    show(1, true, 2.2, &quot;hello&quot;);
}

//3.递归打印参数包内容
//递归出口
void print()
{
    cout &lt;&lt; endl;
}

template &lt;typename T, typename... Args&gt;
void print(T t, Args... args)
{
    cout &lt;&lt; t &lt;&lt; &quot; &quot;;
    //...放在参数左边时为打包
    //...放在参数右边时为解包
    print(args...);
}

void test2()
{
    print(1, 2, 3, 4);
}

//4.递归求和
//递归出口
int sum()
{
    return 0;
}

template &lt;typename U, typename... T&gt;
U sum(U u, T... t)
{
    return u + sum(t...);
}

void test3()
{
    cout &lt;&lt; sum(1,2,3,4) &lt;&lt; endl;
}
</code></pre>
<ul>
<li>类模板</li>
</ul>
<pre><code class="language-c++">//用模板实现一个stack
//版本成员函数不要写为虚函数
//虚函数为实现动态多态，发生在运行时
//而模板需要在编译时进行示例化，矛盾
template &lt;typename T, size_t kSize = 10&gt;
class Stack
{
public:
    Stack():top_(-1), data_(new T[kSize]()){  }
    ~Stack();
    bool full() const;
    bool empty() const;
    void push(const T&amp; t);
    void pop();
    T top();
private:
    int top_;
    T* data_;
};

template &lt;typename T, size_t kSize&gt;
Stack&lt;T, kSize&gt;::~Stack()
{
    if(data_)
    {
        delete [] data_;
        data_ = nullptr;
    }
}

template &lt;typename T, size_t kSize&gt;
bool Stack&lt;T, kSize&gt;::full() const
{
    return top_ == kSize - 1;
}

template &lt;typename T, size_t kSize&gt;
bool Stack&lt;T, kSize&gt;::empty() const
{
    return top_ == -1;
}

template &lt;typename T, size_t kSize&gt;
void Stack&lt;T, kSize&gt;::push(const T&amp; t)
{
    if(full())
    {
        cout &lt;&lt; &quot;stack is full&quot; &lt;&lt; endl;
        return;
    }
    data_[++top_] = t;
}

template &lt;typename T, size_t kSize&gt;
void Stack&lt;T, kSize&gt;::pop()
{
    if(empty())
    {
        cout &lt;&lt; &quot;stack is empty&quot; &lt;&lt; endl;
        return;
    }
    --top_;
}

template &lt;typename T, size_t kSize&gt;
T Stack&lt;T, kSize&gt;::top()
{
    return data_[top_];
}
</code></pre>
<h2 id="容器">容器</h2>
<p><strong>1.序列式容器</strong></p>
<ul>
<li><code>vector</code></li>
<li><code>deque</code></li>
<li><code>list</code></li>
</ul>
<pre><code class="language-c++">//以下为vector、deque、list通用的操作(例外的情况在下面给出)，以vector为例

//注意：其中list不支持下标访问，为什么？
//list的底层实现时一个双向链表，其在逻辑上连续，物理上不连续，不支持下标访问

//注意：vector不支持在头部插入、删除，为什么？
//其逻辑结构、物理结构都连续，若在其头部插入、删除，要将其后所有元素向后、向前位移，这样效率较低

//注意：vector中使用insert时，会出现迭代器失效的问题，为什么？
//在vector插入数据时，当数据个数超过vector当前容量，就会进行扩容
//而在扩容操作实际上是开辟了一块更大的新空间，将老空间的数据拷贝到新空间，并释放老空间，所以会导致迭代器失效
//解决办法：在insert后重置迭代器即可

//注意：在vector中，使用erase时，迭代器也存在问题
//因为连续空间在删除数据时，会发生数据的移动，在删除一个元素后，后续数据会依次向前移动
//此时下一个元素会移动到当前删除位置，而迭代器会移动到下一个位置，导致迭代器少遍历一个元素

//注意：deque、vector使用insert的效率都不高，因为都需要大量的移动元素

//注意：clear清空所有元素，只会使size归0，并不会使capacity归0；
//使用shrink_to_fit回收多余的空间，使capacity归0
//list不支持shrink_to_fit、capacity，为什么？
//因为list在删除元素的同时也将房间一同释放掉了
//deque不支持capacity
void test()
{
    //1.初始化
    //第一参数为个数，第二参数为初始化值
    //若不传入第二参数，则默认初始化为0
    vector&lt;int&gt; number(10, 2);
    //使用迭代器范围初始化
    int arr[] = {1,3,5,7,9,2,4,6,8,10};
    vector&lt;int&gt; number1(arr, arr + 10);
    //使用大括号初始化
    vector&lt;int&gt; number2 = {1,2,3,4,5,6,7,8,9,10};

    //2.遍历
    //下标遍历
    for(size_t idx = 0; idx != number.size(); ++idx)
    {
        cout &lt;&lt; number[idx] &lt;&lt; &quot; &quot;;
    }
    cout &lt;&lt; endl;
    //迭代器遍历
    vector&lt;int&gt;::const_iterator cit;
    for(cit = number1.begin(); cit != number1.end(); ++cit)
    {
        cout &lt;&lt; *cit &lt;&lt; &quot; &quot;;
    }
    cout &lt;&lt; endl;
    //使用auto+迭代器遍历
    auto it = number.begin();
    for(; it != number.end(); ++it)
    {
        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
    }
    cout &lt;&lt; endl;
    //使用auto遍历
    for(auto &amp;elem: number2)
    {
        cout &lt;&lt; elem &lt;&lt; &quot; &quot;;
    }
    cout &lt;&lt; endl;
    
    //3.push_back\pop_back在尾部插入、删除（尾插法）
    number.push_back(11);
    number.pop_back();
    
    //4.push_front\pop_front在头部插入、删除（头插法），vector不支持
    list&lt;int&gt; number1 = {1,2,3,4,5,6,7,8};
    number1.push_front(11);
    number1.pop_front();
    
    //5.使用insert插入
    //可以在任意位置插入，以迭代器的形式
    auto it = number.begin();
    ++it;
    ++it;
    //插入单个数据（插入100）
    it = number.insert(it, 100);
    //插入多个数据（3个30）
    it = number.insert(it, 3, 30);
    //插入迭代器范围的数
    int arr[5] = {10,20,30,40,50};
    number.insert(it, arr, arr + 5);
    
    //6.使用erase删除
    //删除位于pos的元素
    number.erase(pos);
    //删除迭代器范围的数
    int arr[5] = {10,20,30,40,50};
    number.erase(arr, arr + 5);
}
</code></pre>
<ul>
<li><code>list</code>的特殊函数</li>
</ul>
<pre><code class="language-c++">//sort，对元素进行排序
list.sort();
//merge，合并两个已排序的链表，先排序
list1.sort();
list2.sort();
list1.merge(list2);
//reverse，逆转容器中的数据
list.reverse();
//unique，删除连续重复的元素，只保留一个，一般配合sort使用
list.sort();
list.unique();
//splice，将一个链表中的元素剪切到另一个链表（指定位置）
//剪切所有元素
list1.splice(pos, list2);
//剪切一个元素
list1.splice(pos, list2, list2.begin());
//剪切指定范围的元素
list1.splice(pos, list2, list2.begin(), list2.begin() + 2);
//可以在同一个列表进行剪切
</code></pre>
<ul>
<li><code>vector</code>的底层实现</li>
</ul>
<pre><code class="language-c++">class _Vector_alloc_base
{
protected:
    //三个指针位于栈区
    //指向分配内存的首地址
  _Tp* _M_start;
    //最后容器中最后一个元素的下一个地址
  _Tp* _M_finish;
    //指向分配内存的末尾
  _Tp* _M_end_of_storage;    
}

class _Vector_base
:public _Vector_alloc_base{ }

class vector
:protected _Vector_base
{
public:
  //类型萃取：对不同类型的对象调用不同的方法；
  //提取出自定义类型进行深拷贝，而内置类型进行浅拷贝
  typedef _Tp value_type;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef value_type* iterator;
  typedef const value_type* const_iterator;
  typedef value_type&amp; reference;
  typedef const value_type&amp; const_reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;    
}

//vector中的at与下标访问运算符有什么区别？
//使用at进行下标访问时，会先进行检查，判断下标是否越界
//如果越界，则会抛出异常，而下标访问运算符有越界的问题
  reference operator[](size_type __n)
    { return *(begin() + __n); }

  void _M_range_check(size_type __n) const {
    if (__n &gt;= this-&gt;size())
      __stl_throw_range_error(&quot;vector&quot;);
  }
  reference at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

//push_back
  void push_back(const _Tp&amp; __x) {
    if (_M_finish != _M_end_of_storage) {
      construct(_M_finish, __x);
      ++_M_finish;
    }
    else
      _M_insert_aux(end(), __x);
  }
//_M_insert_aux()
	//底层两倍扩容
    const size_type __old_size = size();
    const size_type __len = __old_size != 0 ? 2 * __old_size : 1;
    _M_start = __new_start;
    _M_finish = __new_finish;
    _M_end_of_storage = __new_start + __len;

//data()
//获取第一个元素的地址
&amp;number;//error
&amp;number[0];//ok
&amp;*number.begin();//ok
int* pdata = number.data();//ok
</code></pre>
<ul>
<li>
<p><code>vector</code>扩容相关问题</p>
<p>（1）对于<code>push_back</code>之所以可以进行两倍扩容，是因为其每次只插入一个元素，不会需要二次扩容</p>
<p>（2）对于<code>insert</code>而言，插入元素的个数是不确定的，此时两倍扩容已经不再适用</p>
<p>（3）<code>size() = n, capacity() = m</code>插入元素个数为<code>t</code>个</p>
<ul>
<li><code>t &lt;= m - n</code>，此时不会发生扩容</li>
<li>以下为<code>m - n &lt; t</code> 时：</li>
<li><code>t &lt; n</code>，此时扩容为<code>2 * n</code></li>
<li><code>n &lt; t &lt; m</code>，此时扩容为<code>n + t</code></li>
<li><code>t &gt; m</code>，此时为<code>n + t</code></li>
</ul>
</li>
<li>
<p><code>deque</code>底层实现</p>
</li>
</ul>
<pre><code class="language-c++">class _Deque_alloc_base
{
protected:
  //deque底层片段内连续，片段间不连续
  //通过中控器数组将片段相连
  //中控器数组
  _Tp** _M_map;
  //中控器数组大小
  size_t _M_map_size;
}

class _Deque_base
: public _Deque_alloc_base
{
protected:
  //第一个片段，其中的cur指针指向第一个元素
  iterator _M_start;
  //最后一个片段，其中的cur指针指向最后一个元素的下一个位置
  iterator _M_finish;
}

class deque
: protected _Deque_base
{
    
}

struct _Deque_iterator
{
  //指向当前元素
  _Tp* _M_cur;
  //指向当前片段的首地址
  _Tp* _M_first;
  //指向当前片段最后元素的下一个位置
  _Tp* _M_last;
  //二级指针，指向中控器对应当前片段的指针
  _Map_pointer _M_node;
}
</code></pre>
<p><strong>2.关联式容器</strong></p>
<ul>
<li><code>set</code></li>
<li><code>map</code></li>
<li><code>multiset</code></li>
<li><code>multimap</code></li>
</ul>
<p><strong>3.无序关联式容器</strong></p>
<ul>
<li><code>unordered_set</code></li>
<li><code>unordered_map</code></li>
<li><code>unordered_multiset</code></li>
<li><code>unordered_multimap</code></li>
</ul>
<h2 id="容器适配器">容器适配器</h2>
<ul>
<li><code>stack</code></li>
<li><code>queue</code></li>
<li><code>priority_queue</code></li>
</ul>
<h2 id="迭代器">迭代器</h2>
<h2 id="算法">算法</h2>
<ul>
<li><code>for_each</code></li>
</ul>
<pre><code class="language-c++">//一元函数：函数参数只有一个
//一元断言：函数参数只有一个，返回值为bool类型
void print(int &amp;num)
{
    ++num;
    cout &lt;&lt; num &lt;&lt; &quot; &quot;;
}
void test()
{
    vector&lt;int&gt; number = {1,3,4,5,6,8,7,9};

    copy(number.begin(), number.end(), ostream_iterator&lt;int&gt;(cout, &quot; &quot;));
    cout &lt;&lt; endl;

    //可以修改容器中的值
    for_each(number.begin(), number.end(), print);
    cout &lt;&lt; endl;

    //c++11中的lambda表达式，[]表明为匿名函数
    //方便阅读，但不要写过于复杂的函数
    for_each(number.begin(), number.end(), [] (int &amp;num){
             ++num;
             cout &lt;&lt; num &lt;&lt; &quot; &quot;;
             });
    cout &lt;&lt; endl;

    copy(number.begin(), number.end(), ostream_iterator&lt;int&gt;(cout, &quot; &quot;));
    cout &lt;&lt; endl;
}
</code></pre>
<ul>
<li>查找</li>
</ul>
<pre><code class="language-c++">void test1()
{
    vector&lt;int&gt; number = {1,3,4,5,6,8,7,9};

    copy(number.begin(), number.end(), ostream_iterator&lt;int&gt;(cout, &quot; &quot;));
    cout &lt;&lt; endl;
    
    //查找3，返回其个数
    size_t cnt1 = count(number.begin(), number.end(), 3);
    cout &lt;&lt; &quot;cnt1 = &quot; &lt;&lt; cnt1 &lt;&lt; endl;

    //查找3，返回其迭代器
    auto it = find(number.begin(), number.end(), 3);
    cout &lt;&lt; &quot;*it = &quot; &lt;&lt; *it &lt;&lt; endl;

    //二分查找，配合排序使用
    sort(number.begin(), number.end());
    bool ret = binary_search(number.begin(), number.end(), 3);
    cout &lt;&lt; &quot;ret = &quot; &lt;&lt; ret &lt;&lt; endl;
}
</code></pre>
<ul>
<li><code>remove_if</code></li>
</ul>
<pre><code class="language-c++">void test2()
{
    vector&lt;int&gt; number = {1,3,4,5,6,8,7,9};

    copy(number.begin(), number.end(), ostream_iterator&lt;int&gt;(cout, &quot; &quot;));
    cout &lt;&lt; endl;
    
    //返回要删除部分的首迭代器：为了适应不同的容器,使算法更具有通用性
    auto it = remove_if(number.begin(), number.end(), judge);
    number.erase(it, number.end());
    copy(number.begin(), number.end(), ostream_iterator&lt;int&gt;(cout, &quot; &quot;));
    cout &lt;&lt; endl;

    //lambda表达式
    auto it1 = remove_if(number.begin(), number.end(), [] (int val)
                        {
                            return val &gt; 4;
                        });
    number.erase(it1, number.end());
    copy(number.begin(), number.end(), ostream_iterator&lt;int&gt;(cout, &quot; &quot;));
    cout &lt;&lt; endl;

    //读写操作不要混合使用
    vector&lt;int&gt; vec;
    vec.push_back(1);
    bool flag = true;
    for(auto it = vec.begin(); it != vec.end(); ++it)
    {
        cout &lt;&lt; *it &lt;&lt; endl;
        if(flag)
        {
            //底层发生了扩容,迭代器失效
            vec.push_back(2);
            flag = false;

            //可以通过充值迭代器来解决
            it = vec.begin();
        }
    }
}
</code></pre>
<h2 id="空间配置器">空间配置器</h2>
<ul>
<li>空间申请、释放</li>
</ul>
<pre><code class="language-c++">__malloc_alloc_template
typedef __malloc_alloc_template&lt;0&gt; malloc_alloc;
typedef malloc_alloc alloc;
typedef alloc _Alloc;

static void* allocate(size_t __n)
{
  void* __result = malloc(__n);
  if (0 == __result) __result = _S_oom_malloc(__n);//oom：out of memory
  return __result;
}

static void deallocate(void* __p, size_t /* __n */)
{
  free(__p);
}
</code></pre>
<ul>
<li>对象构建、销毁</li>
</ul>
<pre><code class="language-c++">
</code></pre>
<h1 id="面向对象设计">面向对象设计</h1>
<h2 id="为什么需要面向对象设计">为什么需要面向对象设计</h2>
<ul>
<li>软件一定会变化</li>
<li>软件设计应能应对软件的变化、扩展</li>
<li><font color='red'>以最小的代价满足变化、不改变现有的代码进行扩展</font></li>
</ul>
<h2 id="uml语言">UML语言</h2>
<ul>
<li>
<p>软件开发的生命周期：分析、设计、编码、测试、运行、维护</p>
</li>
<li>
<p>Unifed Modeling Language，统一建模语言、标准建模语言</p>
<p>静态图例：</p>
</li>
<li>
<p><font color='red'>类图（class diagram）</font></p>
</li>
<li>
<p>对象图（object diagram）</p>
</li>
<li>
<p>用例图（use case diagram）</p>
</li>
<li>
<p>组件图（component diagram）</p>
</li>
<li>
<p>部署图（deployment diagram）</p>
</li>
<li>
<p>组合结构图（composite diagram）</p>
<p>动态图例：</p>
</li>
<li>
<p><font color='red'>序列图（sequence diagram）</font></p>
</li>
<li>
<p>协作图（collaboration diagram）</p>
</li>
<li>
<p>状态图（state diagram）</p>
</li>
<li>
<p>活动图（activity diagram）</p>
</li>
</ul>
<h2 id="类与类之间的关系">类与类之间的关系</h2>
<p><strong>1.继承关系（Generalization）</strong></p>
<ul>
<li>基类部分成为派生类的一部分</li>
<li><font color='red'>语义上：A is B</font></li>
<li>在代码上：继承</li>
</ul>
<p><strong>2.关联关系（Association）</strong></p>
<ul>
<li>双向的关联关系：彼此知道对方的存在，但彼此并不负责对方的生命周期</li>
<li>单向的关联关系：A知道B的存在，但B并不知道A的存在，彼此并不负责对方的生命周期</li>
<li><font color='red'>在代码上表现为：指针、引用</font></li>
<li><font color='red'>语义上：A has B</font></li>
</ul>
<p><strong>3.聚合关系（Aggregation）</strong></p>
<ul>
<li>分为整体和局部</li>
<li><font color='red'>整体并不负责局部对象的销毁</font></li>
<li>语义上：A has B</li>
<li>代码上：数据成员以指针、引用的形式存在</li>
</ul>
<p><strong>4.组合关系（Composition）</strong></p>
<ul>
<li>分为整体和局部</li>
<li><font color='red'>整体负责局部对象的销毁</font></li>
<li>语义上：A has B</li>
<li>代码上：数据成员以子对象成员的形式存在</li>
</ul>
<p><strong>5.依赖关系（Dependency）</strong></p>
<ul>
<li>A use B，是一种临时的、偶然的关系</li>
<li>B作为A的<font color=red>成员函数参数</font></li>
<li>B作为A的成员函数的<font color=red>局部变量</font>（B作为A的成员函数的返回值）</li>
<li>A的成员函数调用B的静态方法</li>
</ul>
<p><strong>6.总结</strong></p>
<ul>
<li>继承是类与类之间的纵向关系</li>
<li>关联、聚合、组合、依赖是横向关系</li>
<li>耦合强弱：依赖 &lt; 关联 &lt; 聚合 &lt; 组合 &lt; 继承</li>
<li>组合+依赖可以替代继承</li>
</ul>
<h2 id="面向对象设计原则">面向对象设计原则</h2>
<p><strong>1.单一职责原则</strong></p>
<ul>
<li><font color=red>一个类最好只做一件事，只有一个引起它变化的原因</font></li>
<li>把多个功能耦合在一起，当其中一个功能发生变化时，可能会削弱或抑制其他功能</li>
</ul>
<p><strong>2.开放闭合原则</strong></p>
<ul>
<li><font color=red>对扩展开放，对修改关闭</font></li>
<li>核心思想：对抽象编程</li>
</ul>
<p><strong>3.里氏替换原则</strong></p>
<ul>
<li>核心思想：派生类必须能够替换基类</li>
<li><font color=red>派生类可以扩展基类的功能，但不能改变基类的功能</font></li>
<li>不能隐藏父类的非抽象方法</li>
</ul>
<p><strong>4.接口分离原则</strong></p>
<ul>
<li>使用多个小而专的接口，不要使用一个大的总接口</li>
</ul>
<p><strong>5.依赖倒置原则</strong></p>
<ul>
<li>面向接口编程，依赖于抽象</li>
<li><font color=red>高层模块不依赖于低层模块，二者都依赖于抽象</font></li>
</ul>
<p><strong>6.迪米特法则</strong></p>
<ul>
<li>最少知识原则</li>
<li>一个软件应该尽可能少的与其他实体发生相互作用</li>
<li>优点：降低类与类之间的耦合，减少类与类之间的关联程度</li>
</ul>
<p><strong>7.组合复用原则</strong></p>
<ul>
<li>尽量采用组合、聚合的方式，而不是继承来达到软件复用的目的</li>
</ul>
<h2 id="设计模式">设计模式</h2>
<p><strong>1.分类</strong></p>
<ul>
<li>创建型设计模式：描述如何创建对象</li>
<li>结构型设计模式：描述如何实现类和对象的组合</li>
<li>行为型设计模式：描述类和对象怎么交互以及怎么样分配职责</li>
</ul>
<p><strong>2.创建型设计模式</strong></p>
<ul>
<li>单例模式</li>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>原型模式</li>
<li>建造者模式</li>
</ul>
<p><strong>3.结构型设计模式</strong></p>
<ul>
<li>适配器模式</li>
<li>桥接模式</li>
<li>组合模式</li>
<li>装饰模式</li>
<li>外观模式</li>
<li>享元模式</li>
<li>代理模式</li>
</ul>
<p><strong>4.行为型设计模式</strong></p>
<ul>
<li>职责链模式</li>
<li>命令模式</li>
<li>解释器模式</li>
<li>迭代器模式</li>
<li>中介者模式</li>
<li>备忘录模式</li>
<li>观察者模式</li>
<li>状态模式</li>
<li>策略模式</li>
<li>模板方法模式</li>
<li>访问者模式</li>
</ul>
<p><strong><font color=red>5.工厂模式</font></strong></p>
<ul>
<li>
<p>使用场景：</p>
<p>（1）简单对象不需要使用工厂模式</p>
<p>（2）复杂对象才需要使用工厂模式</p>
<p>（3）对于不确定的对象，可以使用工厂模式</p>
</li>
</ul>
<p><strong><font color=red>6.观察者模式</font></strong></p>
<ul>
<li>定义对象间一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会收到通知，并更新自己的状态</li>
<li>分类：推模式，观察者被动获取消息；拉模式，观察者主动获取消息</li>
</ul>
]]></content>
    </entry>
</feed>